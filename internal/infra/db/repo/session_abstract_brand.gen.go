// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/model"
)

func newSessionAbstractBrand(db *gorm.DB, opts ...gen.DOOption) sessionAbstractBrand {
	_sessionAbstractBrand := sessionAbstractBrand{}

	_sessionAbstractBrand.sessionAbstractBrandDo.UseDB(db, opts...)
	_sessionAbstractBrand.sessionAbstractBrandDo.UseModel(&model.SessionAbstractBrand{})

	tableName := _sessionAbstractBrand.sessionAbstractBrandDo.TableName()
	_sessionAbstractBrand.ALL = field.NewAsterisk(tableName)
	_sessionAbstractBrand.ID = field.NewInt64(tableName, "id")
	_sessionAbstractBrand.AccountID = field.NewInt64(tableName, "account_id")
	_sessionAbstractBrand.UserName = field.NewString(tableName, "user_name")
	_sessionAbstractBrand.UnreadCount = field.NewInt32(tableName, "unread_count")
	_sessionAbstractBrand.LastTime = field.NewInt64(tableName, "last_time")
	_sessionAbstractBrand.CreatedAt = field.NewTime(tableName, "created_at")
	_sessionAbstractBrand.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sessionAbstractBrand.DeletedAt = field.NewField(tableName, "deleted_at")

	_sessionAbstractBrand.fillFieldMap()

	return _sessionAbstractBrand
}

type sessionAbstractBrand struct {
	sessionAbstractBrandDo sessionAbstractBrandDo

	ALL         field.Asterisk
	ID          field.Int64
	AccountID   field.Int64 // 账号id
	UserName    field.String
	UnreadCount field.Int32
	LastTime    field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (s sessionAbstractBrand) Table(newTableName string) *sessionAbstractBrand {
	s.sessionAbstractBrandDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sessionAbstractBrand) As(alias string) *sessionAbstractBrand {
	s.sessionAbstractBrandDo.DO = *(s.sessionAbstractBrandDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sessionAbstractBrand) updateTableName(table string) *sessionAbstractBrand {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.AccountID = field.NewInt64(table, "account_id")
	s.UserName = field.NewString(table, "user_name")
	s.UnreadCount = field.NewInt32(table, "unread_count")
	s.LastTime = field.NewInt64(table, "last_time")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sessionAbstractBrand) WithContext(ctx context.Context) ISessionAbstractBrandDo {
	return s.sessionAbstractBrandDo.WithContext(ctx)
}

func (s sessionAbstractBrand) TableName() string { return s.sessionAbstractBrandDo.TableName() }

func (s sessionAbstractBrand) Alias() string { return s.sessionAbstractBrandDo.Alias() }

func (s sessionAbstractBrand) Columns(cols ...field.Expr) gen.Columns {
	return s.sessionAbstractBrandDo.Columns(cols...)
}

func (s *sessionAbstractBrand) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sessionAbstractBrand) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["account_id"] = s.AccountID
	s.fieldMap["user_name"] = s.UserName
	s.fieldMap["unread_count"] = s.UnreadCount
	s.fieldMap["last_time"] = s.LastTime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sessionAbstractBrand) clone(db *gorm.DB) sessionAbstractBrand {
	s.sessionAbstractBrandDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sessionAbstractBrand) replaceDB(db *gorm.DB) sessionAbstractBrand {
	s.sessionAbstractBrandDo.ReplaceDB(db)
	return s
}

type sessionAbstractBrandDo struct{ gen.DO }

type ISessionAbstractBrandDo interface {
	gen.SubQuery
	Debug() ISessionAbstractBrandDo
	WithContext(ctx context.Context) ISessionAbstractBrandDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISessionAbstractBrandDo
	WriteDB() ISessionAbstractBrandDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISessionAbstractBrandDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISessionAbstractBrandDo
	Not(conds ...gen.Condition) ISessionAbstractBrandDo
	Or(conds ...gen.Condition) ISessionAbstractBrandDo
	Select(conds ...field.Expr) ISessionAbstractBrandDo
	Where(conds ...gen.Condition) ISessionAbstractBrandDo
	Order(conds ...field.Expr) ISessionAbstractBrandDo
	Distinct(cols ...field.Expr) ISessionAbstractBrandDo
	Omit(cols ...field.Expr) ISessionAbstractBrandDo
	Join(table schema.Tabler, on ...field.Expr) ISessionAbstractBrandDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractBrandDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractBrandDo
	Group(cols ...field.Expr) ISessionAbstractBrandDo
	Having(conds ...gen.Condition) ISessionAbstractBrandDo
	Limit(limit int) ISessionAbstractBrandDo
	Offset(offset int) ISessionAbstractBrandDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionAbstractBrandDo
	Unscoped() ISessionAbstractBrandDo
	Create(values ...*model.SessionAbstractBrand) error
	CreateInBatches(values []*model.SessionAbstractBrand, batchSize int) error
	Save(values ...*model.SessionAbstractBrand) error
	First() (*model.SessionAbstractBrand, error)
	Take() (*model.SessionAbstractBrand, error)
	Last() (*model.SessionAbstractBrand, error)
	Find() ([]*model.SessionAbstractBrand, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionAbstractBrand, err error)
	FindInBatches(result *[]*model.SessionAbstractBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SessionAbstractBrand) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISessionAbstractBrandDo
	Assign(attrs ...field.AssignExpr) ISessionAbstractBrandDo
	Joins(fields ...field.RelationField) ISessionAbstractBrandDo
	Preload(fields ...field.RelationField) ISessionAbstractBrandDo
	FirstOrInit() (*model.SessionAbstractBrand, error)
	FirstOrCreate() (*model.SessionAbstractBrand, error)
	FindByPage(offset int, limit int) (result []*model.SessionAbstractBrand, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISessionAbstractBrandDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sessionAbstractBrandDo) Debug() ISessionAbstractBrandDo {
	return s.withDO(s.DO.Debug())
}

func (s sessionAbstractBrandDo) WithContext(ctx context.Context) ISessionAbstractBrandDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sessionAbstractBrandDo) ReadDB() ISessionAbstractBrandDo {
	return s.Clauses(dbresolver.Read)
}

func (s sessionAbstractBrandDo) WriteDB() ISessionAbstractBrandDo {
	return s.Clauses(dbresolver.Write)
}

func (s sessionAbstractBrandDo) Session(config *gorm.Session) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Session(config))
}

func (s sessionAbstractBrandDo) Clauses(conds ...clause.Expression) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sessionAbstractBrandDo) Returning(value interface{}, columns ...string) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sessionAbstractBrandDo) Not(conds ...gen.Condition) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sessionAbstractBrandDo) Or(conds ...gen.Condition) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sessionAbstractBrandDo) Select(conds ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sessionAbstractBrandDo) Where(conds ...gen.Condition) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sessionAbstractBrandDo) Order(conds ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sessionAbstractBrandDo) Distinct(cols ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sessionAbstractBrandDo) Omit(cols ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sessionAbstractBrandDo) Join(table schema.Tabler, on ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sessionAbstractBrandDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sessionAbstractBrandDo) RightJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sessionAbstractBrandDo) Group(cols ...field.Expr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sessionAbstractBrandDo) Having(conds ...gen.Condition) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sessionAbstractBrandDo) Limit(limit int) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sessionAbstractBrandDo) Offset(offset int) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sessionAbstractBrandDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sessionAbstractBrandDo) Unscoped() ISessionAbstractBrandDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sessionAbstractBrandDo) Create(values ...*model.SessionAbstractBrand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sessionAbstractBrandDo) CreateInBatches(values []*model.SessionAbstractBrand, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sessionAbstractBrandDo) Save(values ...*model.SessionAbstractBrand) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sessionAbstractBrandDo) First() (*model.SessionAbstractBrand, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstractBrand), nil
	}
}

func (s sessionAbstractBrandDo) Take() (*model.SessionAbstractBrand, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstractBrand), nil
	}
}

func (s sessionAbstractBrandDo) Last() (*model.SessionAbstractBrand, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstractBrand), nil
	}
}

func (s sessionAbstractBrandDo) Find() ([]*model.SessionAbstractBrand, error) {
	result, err := s.DO.Find()
	return result.([]*model.SessionAbstractBrand), err
}

func (s sessionAbstractBrandDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionAbstractBrand, err error) {
	buf := make([]*model.SessionAbstractBrand, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sessionAbstractBrandDo) FindInBatches(result *[]*model.SessionAbstractBrand, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sessionAbstractBrandDo) Attrs(attrs ...field.AssignExpr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sessionAbstractBrandDo) Assign(attrs ...field.AssignExpr) ISessionAbstractBrandDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sessionAbstractBrandDo) Joins(fields ...field.RelationField) ISessionAbstractBrandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sessionAbstractBrandDo) Preload(fields ...field.RelationField) ISessionAbstractBrandDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sessionAbstractBrandDo) FirstOrInit() (*model.SessionAbstractBrand, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstractBrand), nil
	}
}

func (s sessionAbstractBrandDo) FirstOrCreate() (*model.SessionAbstractBrand, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstractBrand), nil
	}
}

func (s sessionAbstractBrandDo) FindByPage(offset int, limit int) (result []*model.SessionAbstractBrand, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sessionAbstractBrandDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sessionAbstractBrandDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sessionAbstractBrandDo) Delete(models ...*model.SessionAbstractBrand) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sessionAbstractBrandDo) withDO(do gen.Dao) *sessionAbstractBrandDo {
	s.DO = *do.(*gen.DO)
	return s
}

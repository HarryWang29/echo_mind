// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/model"
)

func newContactPerson(db *gorm.DB, opts ...gen.DOOption) contactPerson {
	_contactPerson := contactPerson{}

	_contactPerson.contactPersonDo.UseDB(db, opts...)
	_contactPerson.contactPersonDo.UseModel(&model.ContactPerson{})

	tableName := _contactPerson.contactPersonDo.TableName()
	_contactPerson.ALL = field.NewAsterisk(tableName)
	_contactPerson.ID = field.NewInt64(tableName, "id")
	_contactPerson.AccountID = field.NewInt64(tableName, "account_id")
	_contactPerson.UserName = field.NewString(tableName, "user_name")
	_contactPerson.Nickname = field.NewString(tableName, "nickname")
	_contactPerson.Remark = field.NewString(tableName, "remark")
	_contactPerson.HeadImgURL = field.NewString(tableName, "head_img_url")
	_contactPerson.HeadHdImgURL = field.NewString(tableName, "head_hd_img_url")
	_contactPerson.Sex = field.NewInt32(tableName, "sex")
	_contactPerson.Type = field.NewInt32(tableName, "type")
	_contactPerson.DbName = field.NewString(tableName, "db_name")
	_contactPerson.Status = field.NewBool(tableName, "status")
	_contactPerson.Hash = field.NewString(tableName, "hash")
	_contactPerson.CreatedAt = field.NewTime(tableName, "created_at")
	_contactPerson.UpdatedAt = field.NewTime(tableName, "updated_at")
	_contactPerson.DeletedAt = field.NewField(tableName, "deleted_at")

	_contactPerson.fillFieldMap()

	return _contactPerson
}

type contactPerson struct {
	contactPersonDo contactPersonDo

	ALL          field.Asterisk
	ID           field.Int64
	AccountID    field.Int64  // 账号id
	UserName     field.String // 用户名称
	Nickname     field.String // 昵称
	Remark       field.String // 备注
	HeadImgURL   field.String // 头像
	HeadHdImgURL field.String // 头像
	Sex          field.Int32  // 性别
	Type         field.Int32  // 类型
	DbName       field.String // 数据库名称
	Status       field.Bool   // 状态
	Hash         field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (c contactPerson) Table(newTableName string) *contactPerson {
	c.contactPersonDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c contactPerson) As(alias string) *contactPerson {
	c.contactPersonDo.DO = *(c.contactPersonDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *contactPerson) updateTableName(table string) *contactPerson {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewInt64(table, "id")
	c.AccountID = field.NewInt64(table, "account_id")
	c.UserName = field.NewString(table, "user_name")
	c.Nickname = field.NewString(table, "nickname")
	c.Remark = field.NewString(table, "remark")
	c.HeadImgURL = field.NewString(table, "head_img_url")
	c.HeadHdImgURL = field.NewString(table, "head_hd_img_url")
	c.Sex = field.NewInt32(table, "sex")
	c.Type = field.NewInt32(table, "type")
	c.DbName = field.NewString(table, "db_name")
	c.Status = field.NewBool(table, "status")
	c.Hash = field.NewString(table, "hash")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")

	c.fillFieldMap()

	return c
}

func (c *contactPerson) WithContext(ctx context.Context) IContactPersonDo {
	return c.contactPersonDo.WithContext(ctx)
}

func (c contactPerson) TableName() string { return c.contactPersonDo.TableName() }

func (c contactPerson) Alias() string { return c.contactPersonDo.Alias() }

func (c contactPerson) Columns(cols ...field.Expr) gen.Columns {
	return c.contactPersonDo.Columns(cols...)
}

func (c *contactPerson) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *contactPerson) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 15)
	c.fieldMap["id"] = c.ID
	c.fieldMap["account_id"] = c.AccountID
	c.fieldMap["user_name"] = c.UserName
	c.fieldMap["nickname"] = c.Nickname
	c.fieldMap["remark"] = c.Remark
	c.fieldMap["head_img_url"] = c.HeadImgURL
	c.fieldMap["head_hd_img_url"] = c.HeadHdImgURL
	c.fieldMap["sex"] = c.Sex
	c.fieldMap["type"] = c.Type
	c.fieldMap["db_name"] = c.DbName
	c.fieldMap["status"] = c.Status
	c.fieldMap["hash"] = c.Hash
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
}

func (c contactPerson) clone(db *gorm.DB) contactPerson {
	c.contactPersonDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c contactPerson) replaceDB(db *gorm.DB) contactPerson {
	c.contactPersonDo.ReplaceDB(db)
	return c
}

type contactPersonDo struct{ gen.DO }

type IContactPersonDo interface {
	gen.SubQuery
	Debug() IContactPersonDo
	WithContext(ctx context.Context) IContactPersonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IContactPersonDo
	WriteDB() IContactPersonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IContactPersonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IContactPersonDo
	Not(conds ...gen.Condition) IContactPersonDo
	Or(conds ...gen.Condition) IContactPersonDo
	Select(conds ...field.Expr) IContactPersonDo
	Where(conds ...gen.Condition) IContactPersonDo
	Order(conds ...field.Expr) IContactPersonDo
	Distinct(cols ...field.Expr) IContactPersonDo
	Omit(cols ...field.Expr) IContactPersonDo
	Join(table schema.Tabler, on ...field.Expr) IContactPersonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IContactPersonDo
	RightJoin(table schema.Tabler, on ...field.Expr) IContactPersonDo
	Group(cols ...field.Expr) IContactPersonDo
	Having(conds ...gen.Condition) IContactPersonDo
	Limit(limit int) IContactPersonDo
	Offset(offset int) IContactPersonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IContactPersonDo
	Unscoped() IContactPersonDo
	Create(values ...*model.ContactPerson) error
	CreateInBatches(values []*model.ContactPerson, batchSize int) error
	Save(values ...*model.ContactPerson) error
	First() (*model.ContactPerson, error)
	Take() (*model.ContactPerson, error)
	Last() (*model.ContactPerson, error)
	Find() ([]*model.ContactPerson, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContactPerson, err error)
	FindInBatches(result *[]*model.ContactPerson, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.ContactPerson) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IContactPersonDo
	Assign(attrs ...field.AssignExpr) IContactPersonDo
	Joins(fields ...field.RelationField) IContactPersonDo
	Preload(fields ...field.RelationField) IContactPersonDo
	FirstOrInit() (*model.ContactPerson, error)
	FirstOrCreate() (*model.ContactPerson, error)
	FindByPage(offset int, limit int) (result []*model.ContactPerson, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IContactPersonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.ContactPerson, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (c contactPersonDo) GetByID(id int) (result model.ContactPerson, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM contact_person WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = c.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (c contactPersonDo) Debug() IContactPersonDo {
	return c.withDO(c.DO.Debug())
}

func (c contactPersonDo) WithContext(ctx context.Context) IContactPersonDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c contactPersonDo) ReadDB() IContactPersonDo {
	return c.Clauses(dbresolver.Read)
}

func (c contactPersonDo) WriteDB() IContactPersonDo {
	return c.Clauses(dbresolver.Write)
}

func (c contactPersonDo) Session(config *gorm.Session) IContactPersonDo {
	return c.withDO(c.DO.Session(config))
}

func (c contactPersonDo) Clauses(conds ...clause.Expression) IContactPersonDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c contactPersonDo) Returning(value interface{}, columns ...string) IContactPersonDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c contactPersonDo) Not(conds ...gen.Condition) IContactPersonDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c contactPersonDo) Or(conds ...gen.Condition) IContactPersonDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c contactPersonDo) Select(conds ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c contactPersonDo) Where(conds ...gen.Condition) IContactPersonDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c contactPersonDo) Order(conds ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c contactPersonDo) Distinct(cols ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c contactPersonDo) Omit(cols ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c contactPersonDo) Join(table schema.Tabler, on ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c contactPersonDo) LeftJoin(table schema.Tabler, on ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c contactPersonDo) RightJoin(table schema.Tabler, on ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c contactPersonDo) Group(cols ...field.Expr) IContactPersonDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c contactPersonDo) Having(conds ...gen.Condition) IContactPersonDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c contactPersonDo) Limit(limit int) IContactPersonDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c contactPersonDo) Offset(offset int) IContactPersonDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c contactPersonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IContactPersonDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c contactPersonDo) Unscoped() IContactPersonDo {
	return c.withDO(c.DO.Unscoped())
}

func (c contactPersonDo) Create(values ...*model.ContactPerson) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c contactPersonDo) CreateInBatches(values []*model.ContactPerson, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c contactPersonDo) Save(values ...*model.ContactPerson) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c contactPersonDo) First() (*model.ContactPerson, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContactPerson), nil
	}
}

func (c contactPersonDo) Take() (*model.ContactPerson, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContactPerson), nil
	}
}

func (c contactPersonDo) Last() (*model.ContactPerson, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContactPerson), nil
	}
}

func (c contactPersonDo) Find() ([]*model.ContactPerson, error) {
	result, err := c.DO.Find()
	return result.([]*model.ContactPerson), err
}

func (c contactPersonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ContactPerson, err error) {
	buf := make([]*model.ContactPerson, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c contactPersonDo) FindInBatches(result *[]*model.ContactPerson, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c contactPersonDo) Attrs(attrs ...field.AssignExpr) IContactPersonDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c contactPersonDo) Assign(attrs ...field.AssignExpr) IContactPersonDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c contactPersonDo) Joins(fields ...field.RelationField) IContactPersonDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c contactPersonDo) Preload(fields ...field.RelationField) IContactPersonDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c contactPersonDo) FirstOrInit() (*model.ContactPerson, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContactPerson), nil
	}
}

func (c contactPersonDo) FirstOrCreate() (*model.ContactPerson, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ContactPerson), nil
	}
}

func (c contactPersonDo) FindByPage(offset int, limit int) (result []*model.ContactPerson, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c contactPersonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c contactPersonDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c contactPersonDo) Delete(models ...*model.ContactPerson) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *contactPersonDo) withDO(do gen.Dao) *contactPersonDo {
	c.DO = *do.(*gen.DO)
	return c
}

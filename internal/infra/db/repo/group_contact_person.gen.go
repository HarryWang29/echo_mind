// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/model"
)

func newGroupContactPerson(db *gorm.DB, opts ...gen.DOOption) groupContactPerson {
	_groupContactPerson := groupContactPerson{}

	_groupContactPerson.groupContactPersonDo.UseDB(db, opts...)
	_groupContactPerson.groupContactPersonDo.UseModel(&model.GroupContactPerson{})

	tableName := _groupContactPerson.groupContactPersonDo.TableName()
	_groupContactPerson.ALL = field.NewAsterisk(tableName)
	_groupContactPerson.ID = field.NewInt64(tableName, "id")
	_groupContactPerson.AccountID = field.NewInt64(tableName, "account_id")
	_groupContactPerson.UserName = field.NewString(tableName, "user_name")
	_groupContactPerson.Nickname = field.NewString(tableName, "nickname")
	_groupContactPerson.Remark = field.NewString(tableName, "remark")
	_groupContactPerson.HeadImgURL = field.NewString(tableName, "head_img_url")
	_groupContactPerson.HeadHdImgURL = field.NewString(tableName, "head_hd_img_url")
	_groupContactPerson.Sex = field.NewInt32(tableName, "sex")
	_groupContactPerson.Type = field.NewInt32(tableName, "type")
	_groupContactPerson.DbName = field.NewString(tableName, "db_name")
	_groupContactPerson.Status = field.NewBool(tableName, "status")
	_groupContactPerson.Hash = field.NewString(tableName, "hash")
	_groupContactPerson.CreatedAt = field.NewTime(tableName, "created_at")
	_groupContactPerson.UpdatedAt = field.NewTime(tableName, "updated_at")
	_groupContactPerson.DeletedAt = field.NewField(tableName, "deleted_at")

	_groupContactPerson.fillFieldMap()

	return _groupContactPerson
}

type groupContactPerson struct {
	groupContactPersonDo groupContactPersonDo

	ALL          field.Asterisk
	ID           field.Int64
	AccountID    field.Int64  // 账号id
	UserName     field.String // 用户名称
	Nickname     field.String // 昵称
	Remark       field.String // 备注
	HeadImgURL   field.String // 头像
	HeadHdImgURL field.String // 头像
	Sex          field.Int32  // 性别
	Type         field.Int32  // 类型
	DbName       field.String // 数据库名称
	Status       field.Bool   // 状态
	Hash         field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (g groupContactPerson) Table(newTableName string) *groupContactPerson {
	g.groupContactPersonDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupContactPerson) As(alias string) *groupContactPerson {
	g.groupContactPersonDo.DO = *(g.groupContactPersonDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupContactPerson) updateTableName(table string) *groupContactPerson {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.AccountID = field.NewInt64(table, "account_id")
	g.UserName = field.NewString(table, "user_name")
	g.Nickname = field.NewString(table, "nickname")
	g.Remark = field.NewString(table, "remark")
	g.HeadImgURL = field.NewString(table, "head_img_url")
	g.HeadHdImgURL = field.NewString(table, "head_hd_img_url")
	g.Sex = field.NewInt32(table, "sex")
	g.Type = field.NewInt32(table, "type")
	g.DbName = field.NewString(table, "db_name")
	g.Status = field.NewBool(table, "status")
	g.Hash = field.NewString(table, "hash")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *groupContactPerson) WithContext(ctx context.Context) IGroupContactPersonDo {
	return g.groupContactPersonDo.WithContext(ctx)
}

func (g groupContactPerson) TableName() string { return g.groupContactPersonDo.TableName() }

func (g groupContactPerson) Alias() string { return g.groupContactPersonDo.Alias() }

func (g groupContactPerson) Columns(cols ...field.Expr) gen.Columns {
	return g.groupContactPersonDo.Columns(cols...)
}

func (g *groupContactPerson) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupContactPerson) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 15)
	g.fieldMap["id"] = g.ID
	g.fieldMap["account_id"] = g.AccountID
	g.fieldMap["user_name"] = g.UserName
	g.fieldMap["nickname"] = g.Nickname
	g.fieldMap["remark"] = g.Remark
	g.fieldMap["head_img_url"] = g.HeadImgURL
	g.fieldMap["head_hd_img_url"] = g.HeadHdImgURL
	g.fieldMap["sex"] = g.Sex
	g.fieldMap["type"] = g.Type
	g.fieldMap["db_name"] = g.DbName
	g.fieldMap["status"] = g.Status
	g.fieldMap["hash"] = g.Hash
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g groupContactPerson) clone(db *gorm.DB) groupContactPerson {
	g.groupContactPersonDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupContactPerson) replaceDB(db *gorm.DB) groupContactPerson {
	g.groupContactPersonDo.ReplaceDB(db)
	return g
}

type groupContactPersonDo struct{ gen.DO }

type IGroupContactPersonDo interface {
	gen.SubQuery
	Debug() IGroupContactPersonDo
	WithContext(ctx context.Context) IGroupContactPersonDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroupContactPersonDo
	WriteDB() IGroupContactPersonDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroupContactPersonDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroupContactPersonDo
	Not(conds ...gen.Condition) IGroupContactPersonDo
	Or(conds ...gen.Condition) IGroupContactPersonDo
	Select(conds ...field.Expr) IGroupContactPersonDo
	Where(conds ...gen.Condition) IGroupContactPersonDo
	Order(conds ...field.Expr) IGroupContactPersonDo
	Distinct(cols ...field.Expr) IGroupContactPersonDo
	Omit(cols ...field.Expr) IGroupContactPersonDo
	Join(table schema.Tabler, on ...field.Expr) IGroupContactPersonDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroupContactPersonDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroupContactPersonDo
	Group(cols ...field.Expr) IGroupContactPersonDo
	Having(conds ...gen.Condition) IGroupContactPersonDo
	Limit(limit int) IGroupContactPersonDo
	Offset(offset int) IGroupContactPersonDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupContactPersonDo
	Unscoped() IGroupContactPersonDo
	Create(values ...*model.GroupContactPerson) error
	CreateInBatches(values []*model.GroupContactPerson, batchSize int) error
	Save(values ...*model.GroupContactPerson) error
	First() (*model.GroupContactPerson, error)
	Take() (*model.GroupContactPerson, error)
	Last() (*model.GroupContactPerson, error)
	Find() ([]*model.GroupContactPerson, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupContactPerson, err error)
	FindInBatches(result *[]*model.GroupContactPerson, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GroupContactPerson) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroupContactPersonDo
	Assign(attrs ...field.AssignExpr) IGroupContactPersonDo
	Joins(fields ...field.RelationField) IGroupContactPersonDo
	Preload(fields ...field.RelationField) IGroupContactPersonDo
	FirstOrInit() (*model.GroupContactPerson, error)
	FirstOrCreate() (*model.GroupContactPerson, error)
	FindByPage(offset int, limit int) (result []*model.GroupContactPerson, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroupContactPersonDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.GroupContactPerson, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (g groupContactPersonDo) GetByID(id int) (result model.GroupContactPerson, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM group_contact_person WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (g groupContactPersonDo) Debug() IGroupContactPersonDo {
	return g.withDO(g.DO.Debug())
}

func (g groupContactPersonDo) WithContext(ctx context.Context) IGroupContactPersonDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupContactPersonDo) ReadDB() IGroupContactPersonDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupContactPersonDo) WriteDB() IGroupContactPersonDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupContactPersonDo) Session(config *gorm.Session) IGroupContactPersonDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupContactPersonDo) Clauses(conds ...clause.Expression) IGroupContactPersonDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupContactPersonDo) Returning(value interface{}, columns ...string) IGroupContactPersonDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupContactPersonDo) Not(conds ...gen.Condition) IGroupContactPersonDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupContactPersonDo) Or(conds ...gen.Condition) IGroupContactPersonDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupContactPersonDo) Select(conds ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupContactPersonDo) Where(conds ...gen.Condition) IGroupContactPersonDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupContactPersonDo) Order(conds ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupContactPersonDo) Distinct(cols ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupContactPersonDo) Omit(cols ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupContactPersonDo) Join(table schema.Tabler, on ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupContactPersonDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupContactPersonDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupContactPersonDo) Group(cols ...field.Expr) IGroupContactPersonDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupContactPersonDo) Having(conds ...gen.Condition) IGroupContactPersonDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupContactPersonDo) Limit(limit int) IGroupContactPersonDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupContactPersonDo) Offset(offset int) IGroupContactPersonDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupContactPersonDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupContactPersonDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupContactPersonDo) Unscoped() IGroupContactPersonDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupContactPersonDo) Create(values ...*model.GroupContactPerson) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupContactPersonDo) CreateInBatches(values []*model.GroupContactPerson, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupContactPersonDo) Save(values ...*model.GroupContactPerson) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupContactPersonDo) First() (*model.GroupContactPerson, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContactPerson), nil
	}
}

func (g groupContactPersonDo) Take() (*model.GroupContactPerson, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContactPerson), nil
	}
}

func (g groupContactPersonDo) Last() (*model.GroupContactPerson, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContactPerson), nil
	}
}

func (g groupContactPersonDo) Find() ([]*model.GroupContactPerson, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupContactPerson), err
}

func (g groupContactPersonDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupContactPerson, err error) {
	buf := make([]*model.GroupContactPerson, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupContactPersonDo) FindInBatches(result *[]*model.GroupContactPerson, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupContactPersonDo) Attrs(attrs ...field.AssignExpr) IGroupContactPersonDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupContactPersonDo) Assign(attrs ...field.AssignExpr) IGroupContactPersonDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupContactPersonDo) Joins(fields ...field.RelationField) IGroupContactPersonDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupContactPersonDo) Preload(fields ...field.RelationField) IGroupContactPersonDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupContactPersonDo) FirstOrInit() (*model.GroupContactPerson, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContactPerson), nil
	}
}

func (g groupContactPersonDo) FirstOrCreate() (*model.GroupContactPerson, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContactPerson), nil
	}
}

func (g groupContactPersonDo) FindByPage(offset int, limit int) (result []*model.GroupContactPerson, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupContactPersonDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupContactPersonDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupContactPersonDo) Delete(models ...*model.GroupContactPerson) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupContactPersonDo) withDO(do gen.Dao) *groupContactPersonDo {
	g.DO = *do.(*gen.DO)
	return g
}

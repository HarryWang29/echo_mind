// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/model"
)

func newSessionAbstract(db *gorm.DB, opts ...gen.DOOption) sessionAbstract {
	_sessionAbstract := sessionAbstract{}

	_sessionAbstract.sessionAbstractDo.UseDB(db, opts...)
	_sessionAbstract.sessionAbstractDo.UseModel(&model.SessionAbstract{})

	tableName := _sessionAbstract.sessionAbstractDo.TableName()
	_sessionAbstract.ALL = field.NewAsterisk(tableName)
	_sessionAbstract.ID = field.NewInt64(tableName, "id")
	_sessionAbstract.AccountID = field.NewInt64(tableName, "account_id")
	_sessionAbstract.UserName = field.NewString(tableName, "user_name")
	_sessionAbstract.UnreadCount = field.NewInt32(tableName, "unread_count")
	_sessionAbstract.LastTime = field.NewInt64(tableName, "last_time")
	_sessionAbstract.CreatedAt = field.NewTime(tableName, "created_at")
	_sessionAbstract.UpdatedAt = field.NewTime(tableName, "updated_at")
	_sessionAbstract.DeletedAt = field.NewField(tableName, "deleted_at")

	_sessionAbstract.fillFieldMap()

	return _sessionAbstract
}

type sessionAbstract struct {
	sessionAbstractDo sessionAbstractDo

	ALL         field.Asterisk
	ID          field.Int64
	AccountID   field.Int64 // 账号id
	UserName    field.String
	UnreadCount field.Int32
	LastTime    field.Int64
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field

	fieldMap map[string]field.Expr
}

func (s sessionAbstract) Table(newTableName string) *sessionAbstract {
	s.sessionAbstractDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sessionAbstract) As(alias string) *sessionAbstract {
	s.sessionAbstractDo.DO = *(s.sessionAbstractDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sessionAbstract) updateTableName(table string) *sessionAbstract {
	s.ALL = field.NewAsterisk(table)
	s.ID = field.NewInt64(table, "id")
	s.AccountID = field.NewInt64(table, "account_id")
	s.UserName = field.NewString(table, "user_name")
	s.UnreadCount = field.NewInt32(table, "unread_count")
	s.LastTime = field.NewInt64(table, "last_time")
	s.CreatedAt = field.NewTime(table, "created_at")
	s.UpdatedAt = field.NewTime(table, "updated_at")
	s.DeletedAt = field.NewField(table, "deleted_at")

	s.fillFieldMap()

	return s
}

func (s *sessionAbstract) WithContext(ctx context.Context) ISessionAbstractDo {
	return s.sessionAbstractDo.WithContext(ctx)
}

func (s sessionAbstract) TableName() string { return s.sessionAbstractDo.TableName() }

func (s sessionAbstract) Alias() string { return s.sessionAbstractDo.Alias() }

func (s sessionAbstract) Columns(cols ...field.Expr) gen.Columns {
	return s.sessionAbstractDo.Columns(cols...)
}

func (s *sessionAbstract) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sessionAbstract) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 8)
	s.fieldMap["id"] = s.ID
	s.fieldMap["account_id"] = s.AccountID
	s.fieldMap["user_name"] = s.UserName
	s.fieldMap["unread_count"] = s.UnreadCount
	s.fieldMap["last_time"] = s.LastTime
	s.fieldMap["created_at"] = s.CreatedAt
	s.fieldMap["updated_at"] = s.UpdatedAt
	s.fieldMap["deleted_at"] = s.DeletedAt
}

func (s sessionAbstract) clone(db *gorm.DB) sessionAbstract {
	s.sessionAbstractDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sessionAbstract) replaceDB(db *gorm.DB) sessionAbstract {
	s.sessionAbstractDo.ReplaceDB(db)
	return s
}

type sessionAbstractDo struct{ gen.DO }

type ISessionAbstractDo interface {
	gen.SubQuery
	Debug() ISessionAbstractDo
	WithContext(ctx context.Context) ISessionAbstractDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISessionAbstractDo
	WriteDB() ISessionAbstractDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISessionAbstractDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISessionAbstractDo
	Not(conds ...gen.Condition) ISessionAbstractDo
	Or(conds ...gen.Condition) ISessionAbstractDo
	Select(conds ...field.Expr) ISessionAbstractDo
	Where(conds ...gen.Condition) ISessionAbstractDo
	Order(conds ...field.Expr) ISessionAbstractDo
	Distinct(cols ...field.Expr) ISessionAbstractDo
	Omit(cols ...field.Expr) ISessionAbstractDo
	Join(table schema.Tabler, on ...field.Expr) ISessionAbstractDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo
	Group(cols ...field.Expr) ISessionAbstractDo
	Having(conds ...gen.Condition) ISessionAbstractDo
	Limit(limit int) ISessionAbstractDo
	Offset(offset int) ISessionAbstractDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionAbstractDo
	Unscoped() ISessionAbstractDo
	Create(values ...*model.SessionAbstract) error
	CreateInBatches(values []*model.SessionAbstract, batchSize int) error
	Save(values ...*model.SessionAbstract) error
	First() (*model.SessionAbstract, error)
	Take() (*model.SessionAbstract, error)
	Last() (*model.SessionAbstract, error)
	Find() ([]*model.SessionAbstract, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionAbstract, err error)
	FindInBatches(result *[]*model.SessionAbstract, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SessionAbstract) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISessionAbstractDo
	Assign(attrs ...field.AssignExpr) ISessionAbstractDo
	Joins(fields ...field.RelationField) ISessionAbstractDo
	Preload(fields ...field.RelationField) ISessionAbstractDo
	FirstOrInit() (*model.SessionAbstract, error)
	FirstOrCreate() (*model.SessionAbstract, error)
	FindByPage(offset int, limit int) (result []*model.SessionAbstract, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISessionAbstractDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (s sessionAbstractDo) Debug() ISessionAbstractDo {
	return s.withDO(s.DO.Debug())
}

func (s sessionAbstractDo) WithContext(ctx context.Context) ISessionAbstractDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sessionAbstractDo) ReadDB() ISessionAbstractDo {
	return s.Clauses(dbresolver.Read)
}

func (s sessionAbstractDo) WriteDB() ISessionAbstractDo {
	return s.Clauses(dbresolver.Write)
}

func (s sessionAbstractDo) Session(config *gorm.Session) ISessionAbstractDo {
	return s.withDO(s.DO.Session(config))
}

func (s sessionAbstractDo) Clauses(conds ...clause.Expression) ISessionAbstractDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sessionAbstractDo) Returning(value interface{}, columns ...string) ISessionAbstractDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sessionAbstractDo) Not(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sessionAbstractDo) Or(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sessionAbstractDo) Select(conds ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sessionAbstractDo) Where(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sessionAbstractDo) Order(conds ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sessionAbstractDo) Distinct(cols ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sessionAbstractDo) Omit(cols ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sessionAbstractDo) Join(table schema.Tabler, on ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sessionAbstractDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sessionAbstractDo) RightJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sessionAbstractDo) Group(cols ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sessionAbstractDo) Having(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sessionAbstractDo) Limit(limit int) ISessionAbstractDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sessionAbstractDo) Offset(offset int) ISessionAbstractDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sessionAbstractDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionAbstractDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sessionAbstractDo) Unscoped() ISessionAbstractDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sessionAbstractDo) Create(values ...*model.SessionAbstract) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sessionAbstractDo) CreateInBatches(values []*model.SessionAbstract, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sessionAbstractDo) Save(values ...*model.SessionAbstract) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sessionAbstractDo) First() (*model.SessionAbstract, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) Take() (*model.SessionAbstract, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) Last() (*model.SessionAbstract, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) Find() ([]*model.SessionAbstract, error) {
	result, err := s.DO.Find()
	return result.([]*model.SessionAbstract), err
}

func (s sessionAbstractDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionAbstract, err error) {
	buf := make([]*model.SessionAbstract, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sessionAbstractDo) FindInBatches(result *[]*model.SessionAbstract, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sessionAbstractDo) Attrs(attrs ...field.AssignExpr) ISessionAbstractDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sessionAbstractDo) Assign(attrs ...field.AssignExpr) ISessionAbstractDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sessionAbstractDo) Joins(fields ...field.RelationField) ISessionAbstractDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sessionAbstractDo) Preload(fields ...field.RelationField) ISessionAbstractDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sessionAbstractDo) FirstOrInit() (*model.SessionAbstract, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) FirstOrCreate() (*model.SessionAbstract, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) FindByPage(offset int, limit int) (result []*model.SessionAbstract, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sessionAbstractDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sessionAbstractDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sessionAbstractDo) Delete(models ...*model.SessionAbstract) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sessionAbstractDo) withDO(do gen.Dao) *sessionAbstractDo {
	s.DO = *do.(*gen.DO)
	return s
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/model"
)

func newGroupUserRelation(db *gorm.DB, opts ...gen.DOOption) groupUserRelation {
	_groupUserRelation := groupUserRelation{}

	_groupUserRelation.groupUserRelationDo.UseDB(db, opts...)
	_groupUserRelation.groupUserRelationDo.UseModel(&model.GroupUserRelation{})

	tableName := _groupUserRelation.groupUserRelationDo.TableName()
	_groupUserRelation.ALL = field.NewAsterisk(tableName)
	_groupUserRelation.ID = field.NewInt64(tableName, "id")
	_groupUserRelation.AccountID = field.NewInt64(tableName, "account_id")
	_groupUserRelation.UserName = field.NewString(tableName, "user_name")
	_groupUserRelation.GroupName = field.NewString(tableName, "group_name")

	_groupUserRelation.fillFieldMap()

	return _groupUserRelation
}

type groupUserRelation struct {
	groupUserRelationDo groupUserRelationDo

	ALL       field.Asterisk
	ID        field.Int64
	AccountID field.Int64 // 账号id
	UserName  field.String
	GroupName field.String

	fieldMap map[string]field.Expr
}

func (g groupUserRelation) Table(newTableName string) *groupUserRelation {
	g.groupUserRelationDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupUserRelation) As(alias string) *groupUserRelation {
	g.groupUserRelationDo.DO = *(g.groupUserRelationDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupUserRelation) updateTableName(table string) *groupUserRelation {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.AccountID = field.NewInt64(table, "account_id")
	g.UserName = field.NewString(table, "user_name")
	g.GroupName = field.NewString(table, "group_name")

	g.fillFieldMap()

	return g
}

func (g *groupUserRelation) WithContext(ctx context.Context) IGroupUserRelationDo {
	return g.groupUserRelationDo.WithContext(ctx)
}

func (g groupUserRelation) TableName() string { return g.groupUserRelationDo.TableName() }

func (g groupUserRelation) Alias() string { return g.groupUserRelationDo.Alias() }

func (g groupUserRelation) Columns(cols ...field.Expr) gen.Columns {
	return g.groupUserRelationDo.Columns(cols...)
}

func (g *groupUserRelation) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupUserRelation) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 4)
	g.fieldMap["id"] = g.ID
	g.fieldMap["account_id"] = g.AccountID
	g.fieldMap["user_name"] = g.UserName
	g.fieldMap["group_name"] = g.GroupName
}

func (g groupUserRelation) clone(db *gorm.DB) groupUserRelation {
	g.groupUserRelationDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupUserRelation) replaceDB(db *gorm.DB) groupUserRelation {
	g.groupUserRelationDo.ReplaceDB(db)
	return g
}

type groupUserRelationDo struct{ gen.DO }

type IGroupUserRelationDo interface {
	gen.SubQuery
	Debug() IGroupUserRelationDo
	WithContext(ctx context.Context) IGroupUserRelationDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroupUserRelationDo
	WriteDB() IGroupUserRelationDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroupUserRelationDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroupUserRelationDo
	Not(conds ...gen.Condition) IGroupUserRelationDo
	Or(conds ...gen.Condition) IGroupUserRelationDo
	Select(conds ...field.Expr) IGroupUserRelationDo
	Where(conds ...gen.Condition) IGroupUserRelationDo
	Order(conds ...field.Expr) IGroupUserRelationDo
	Distinct(cols ...field.Expr) IGroupUserRelationDo
	Omit(cols ...field.Expr) IGroupUserRelationDo
	Join(table schema.Tabler, on ...field.Expr) IGroupUserRelationDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroupUserRelationDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroupUserRelationDo
	Group(cols ...field.Expr) IGroupUserRelationDo
	Having(conds ...gen.Condition) IGroupUserRelationDo
	Limit(limit int) IGroupUserRelationDo
	Offset(offset int) IGroupUserRelationDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupUserRelationDo
	Unscoped() IGroupUserRelationDo
	Create(values ...*model.GroupUserRelation) error
	CreateInBatches(values []*model.GroupUserRelation, batchSize int) error
	Save(values ...*model.GroupUserRelation) error
	First() (*model.GroupUserRelation, error)
	Take() (*model.GroupUserRelation, error)
	Last() (*model.GroupUserRelation, error)
	Find() ([]*model.GroupUserRelation, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupUserRelation, err error)
	FindInBatches(result *[]*model.GroupUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GroupUserRelation) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroupUserRelationDo
	Assign(attrs ...field.AssignExpr) IGroupUserRelationDo
	Joins(fields ...field.RelationField) IGroupUserRelationDo
	Preload(fields ...field.RelationField) IGroupUserRelationDo
	FirstOrInit() (*model.GroupUserRelation, error)
	FirstOrCreate() (*model.GroupUserRelation, error)
	FindByPage(offset int, limit int) (result []*model.GroupUserRelation, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroupUserRelationDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.GroupUserRelation, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (g groupUserRelationDo) GetByID(id int) (result model.GroupUserRelation, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM group_user_relation WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (g groupUserRelationDo) Debug() IGroupUserRelationDo {
	return g.withDO(g.DO.Debug())
}

func (g groupUserRelationDo) WithContext(ctx context.Context) IGroupUserRelationDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupUserRelationDo) ReadDB() IGroupUserRelationDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupUserRelationDo) WriteDB() IGroupUserRelationDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupUserRelationDo) Session(config *gorm.Session) IGroupUserRelationDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupUserRelationDo) Clauses(conds ...clause.Expression) IGroupUserRelationDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupUserRelationDo) Returning(value interface{}, columns ...string) IGroupUserRelationDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupUserRelationDo) Not(conds ...gen.Condition) IGroupUserRelationDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupUserRelationDo) Or(conds ...gen.Condition) IGroupUserRelationDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupUserRelationDo) Select(conds ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupUserRelationDo) Where(conds ...gen.Condition) IGroupUserRelationDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupUserRelationDo) Order(conds ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupUserRelationDo) Distinct(cols ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupUserRelationDo) Omit(cols ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupUserRelationDo) Join(table schema.Tabler, on ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupUserRelationDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupUserRelationDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupUserRelationDo) Group(cols ...field.Expr) IGroupUserRelationDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupUserRelationDo) Having(conds ...gen.Condition) IGroupUserRelationDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupUserRelationDo) Limit(limit int) IGroupUserRelationDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupUserRelationDo) Offset(offset int) IGroupUserRelationDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupUserRelationDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupUserRelationDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupUserRelationDo) Unscoped() IGroupUserRelationDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupUserRelationDo) Create(values ...*model.GroupUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupUserRelationDo) CreateInBatches(values []*model.GroupUserRelation, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupUserRelationDo) Save(values ...*model.GroupUserRelation) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupUserRelationDo) First() (*model.GroupUserRelation, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupUserRelation), nil
	}
}

func (g groupUserRelationDo) Take() (*model.GroupUserRelation, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupUserRelation), nil
	}
}

func (g groupUserRelationDo) Last() (*model.GroupUserRelation, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupUserRelation), nil
	}
}

func (g groupUserRelationDo) Find() ([]*model.GroupUserRelation, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupUserRelation), err
}

func (g groupUserRelationDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupUserRelation, err error) {
	buf := make([]*model.GroupUserRelation, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupUserRelationDo) FindInBatches(result *[]*model.GroupUserRelation, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupUserRelationDo) Attrs(attrs ...field.AssignExpr) IGroupUserRelationDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupUserRelationDo) Assign(attrs ...field.AssignExpr) IGroupUserRelationDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupUserRelationDo) Joins(fields ...field.RelationField) IGroupUserRelationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupUserRelationDo) Preload(fields ...field.RelationField) IGroupUserRelationDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupUserRelationDo) FirstOrInit() (*model.GroupUserRelation, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupUserRelation), nil
	}
}

func (g groupUserRelationDo) FirstOrCreate() (*model.GroupUserRelation, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupUserRelation), nil
	}
}

func (g groupUserRelationDo) FindByPage(offset int, limit int) (result []*model.GroupUserRelation, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupUserRelationDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupUserRelationDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupUserRelationDo) Delete(models ...*model.GroupUserRelation) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupUserRelationDo) withDO(do gen.Dao) *groupUserRelationDo {
	g.DO = *do.(*gen.DO)
	return g
}

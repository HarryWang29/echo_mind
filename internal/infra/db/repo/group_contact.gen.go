// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package repo

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/model"
)

func newGroupContact(db *gorm.DB, opts ...gen.DOOption) groupContact {
	_groupContact := groupContact{}

	_groupContact.groupContactDo.UseDB(db, opts...)
	_groupContact.groupContactDo.UseModel(&model.GroupContact{})

	tableName := _groupContact.groupContactDo.TableName()
	_groupContact.ALL = field.NewAsterisk(tableName)
	_groupContact.ID = field.NewInt64(tableName, "id")
	_groupContact.AccountID = field.NewInt64(tableName, "account_id")
	_groupContact.UserName = field.NewString(tableName, "user_name")
	_groupContact.Nickname = field.NewString(tableName, "nickname")
	_groupContact.HeadImgURL = field.NewString(tableName, "head_img_url")
	_groupContact.HeadHdImgURL = field.NewString(tableName, "head_hd_img_url")
	_groupContact.GroupMember = field.NewString(tableName, "group_member")
	_groupContact.DbName = field.NewString(tableName, "db_name")
	_groupContact.Status = field.NewBool(tableName, "status")
	_groupContact.Hash = field.NewString(tableName, "hash")
	_groupContact.CreatedAt = field.NewTime(tableName, "created_at")
	_groupContact.UpdatedAt = field.NewTime(tableName, "updated_at")
	_groupContact.DeletedAt = field.NewField(tableName, "deleted_at")

	_groupContact.fillFieldMap()

	return _groupContact
}

type groupContact struct {
	groupContactDo groupContactDo

	ALL          field.Asterisk
	ID           field.Int64
	AccountID    field.Int64  // 账号id
	UserName     field.String // 用户名称
	Nickname     field.String // 昵称
	HeadImgURL   field.String // 头像
	HeadHdImgURL field.String // 头像
	GroupMember  field.String // 群成员
	DbName       field.String // 数据库名称
	Status       field.Bool   // 状态
	Hash         field.String
	CreatedAt    field.Time
	UpdatedAt    field.Time
	DeletedAt    field.Field

	fieldMap map[string]field.Expr
}

func (g groupContact) Table(newTableName string) *groupContact {
	g.groupContactDo.UseTable(newTableName)
	return g.updateTableName(newTableName)
}

func (g groupContact) As(alias string) *groupContact {
	g.groupContactDo.DO = *(g.groupContactDo.As(alias).(*gen.DO))
	return g.updateTableName(alias)
}

func (g *groupContact) updateTableName(table string) *groupContact {
	g.ALL = field.NewAsterisk(table)
	g.ID = field.NewInt64(table, "id")
	g.AccountID = field.NewInt64(table, "account_id")
	g.UserName = field.NewString(table, "user_name")
	g.Nickname = field.NewString(table, "nickname")
	g.HeadImgURL = field.NewString(table, "head_img_url")
	g.HeadHdImgURL = field.NewString(table, "head_hd_img_url")
	g.GroupMember = field.NewString(table, "group_member")
	g.DbName = field.NewString(table, "db_name")
	g.Status = field.NewBool(table, "status")
	g.Hash = field.NewString(table, "hash")
	g.CreatedAt = field.NewTime(table, "created_at")
	g.UpdatedAt = field.NewTime(table, "updated_at")
	g.DeletedAt = field.NewField(table, "deleted_at")

	g.fillFieldMap()

	return g
}

func (g *groupContact) WithContext(ctx context.Context) IGroupContactDo {
	return g.groupContactDo.WithContext(ctx)
}

func (g groupContact) TableName() string { return g.groupContactDo.TableName() }

func (g groupContact) Alias() string { return g.groupContactDo.Alias() }

func (g groupContact) Columns(cols ...field.Expr) gen.Columns {
	return g.groupContactDo.Columns(cols...)
}

func (g *groupContact) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := g.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (g *groupContact) fillFieldMap() {
	g.fieldMap = make(map[string]field.Expr, 13)
	g.fieldMap["id"] = g.ID
	g.fieldMap["account_id"] = g.AccountID
	g.fieldMap["user_name"] = g.UserName
	g.fieldMap["nickname"] = g.Nickname
	g.fieldMap["head_img_url"] = g.HeadImgURL
	g.fieldMap["head_hd_img_url"] = g.HeadHdImgURL
	g.fieldMap["group_member"] = g.GroupMember
	g.fieldMap["db_name"] = g.DbName
	g.fieldMap["status"] = g.Status
	g.fieldMap["hash"] = g.Hash
	g.fieldMap["created_at"] = g.CreatedAt
	g.fieldMap["updated_at"] = g.UpdatedAt
	g.fieldMap["deleted_at"] = g.DeletedAt
}

func (g groupContact) clone(db *gorm.DB) groupContact {
	g.groupContactDo.ReplaceConnPool(db.Statement.ConnPool)
	return g
}

func (g groupContact) replaceDB(db *gorm.DB) groupContact {
	g.groupContactDo.ReplaceDB(db)
	return g
}

type groupContactDo struct{ gen.DO }

type IGroupContactDo interface {
	gen.SubQuery
	Debug() IGroupContactDo
	WithContext(ctx context.Context) IGroupContactDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IGroupContactDo
	WriteDB() IGroupContactDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IGroupContactDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IGroupContactDo
	Not(conds ...gen.Condition) IGroupContactDo
	Or(conds ...gen.Condition) IGroupContactDo
	Select(conds ...field.Expr) IGroupContactDo
	Where(conds ...gen.Condition) IGroupContactDo
	Order(conds ...field.Expr) IGroupContactDo
	Distinct(cols ...field.Expr) IGroupContactDo
	Omit(cols ...field.Expr) IGroupContactDo
	Join(table schema.Tabler, on ...field.Expr) IGroupContactDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IGroupContactDo
	RightJoin(table schema.Tabler, on ...field.Expr) IGroupContactDo
	Group(cols ...field.Expr) IGroupContactDo
	Having(conds ...gen.Condition) IGroupContactDo
	Limit(limit int) IGroupContactDo
	Offset(offset int) IGroupContactDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupContactDo
	Unscoped() IGroupContactDo
	Create(values ...*model.GroupContact) error
	CreateInBatches(values []*model.GroupContact, batchSize int) error
	Save(values ...*model.GroupContact) error
	First() (*model.GroupContact, error)
	Take() (*model.GroupContact, error)
	Last() (*model.GroupContact, error)
	Find() ([]*model.GroupContact, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupContact, err error)
	FindInBatches(result *[]*model.GroupContact, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.GroupContact) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IGroupContactDo
	Assign(attrs ...field.AssignExpr) IGroupContactDo
	Joins(fields ...field.RelationField) IGroupContactDo
	Preload(fields ...field.RelationField) IGroupContactDo
	FirstOrInit() (*model.GroupContact, error)
	FirstOrCreate() (*model.GroupContact, error)
	FindByPage(offset int, limit int) (result []*model.GroupContact, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IGroupContactDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.GroupContact, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (g groupContactDo) GetByID(id int) (result model.GroupContact, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM group_contact WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = g.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (g groupContactDo) Debug() IGroupContactDo {
	return g.withDO(g.DO.Debug())
}

func (g groupContactDo) WithContext(ctx context.Context) IGroupContactDo {
	return g.withDO(g.DO.WithContext(ctx))
}

func (g groupContactDo) ReadDB() IGroupContactDo {
	return g.Clauses(dbresolver.Read)
}

func (g groupContactDo) WriteDB() IGroupContactDo {
	return g.Clauses(dbresolver.Write)
}

func (g groupContactDo) Session(config *gorm.Session) IGroupContactDo {
	return g.withDO(g.DO.Session(config))
}

func (g groupContactDo) Clauses(conds ...clause.Expression) IGroupContactDo {
	return g.withDO(g.DO.Clauses(conds...))
}

func (g groupContactDo) Returning(value interface{}, columns ...string) IGroupContactDo {
	return g.withDO(g.DO.Returning(value, columns...))
}

func (g groupContactDo) Not(conds ...gen.Condition) IGroupContactDo {
	return g.withDO(g.DO.Not(conds...))
}

func (g groupContactDo) Or(conds ...gen.Condition) IGroupContactDo {
	return g.withDO(g.DO.Or(conds...))
}

func (g groupContactDo) Select(conds ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.Select(conds...))
}

func (g groupContactDo) Where(conds ...gen.Condition) IGroupContactDo {
	return g.withDO(g.DO.Where(conds...))
}

func (g groupContactDo) Order(conds ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.Order(conds...))
}

func (g groupContactDo) Distinct(cols ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.Distinct(cols...))
}

func (g groupContactDo) Omit(cols ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.Omit(cols...))
}

func (g groupContactDo) Join(table schema.Tabler, on ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.Join(table, on...))
}

func (g groupContactDo) LeftJoin(table schema.Tabler, on ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.LeftJoin(table, on...))
}

func (g groupContactDo) RightJoin(table schema.Tabler, on ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.RightJoin(table, on...))
}

func (g groupContactDo) Group(cols ...field.Expr) IGroupContactDo {
	return g.withDO(g.DO.Group(cols...))
}

func (g groupContactDo) Having(conds ...gen.Condition) IGroupContactDo {
	return g.withDO(g.DO.Having(conds...))
}

func (g groupContactDo) Limit(limit int) IGroupContactDo {
	return g.withDO(g.DO.Limit(limit))
}

func (g groupContactDo) Offset(offset int) IGroupContactDo {
	return g.withDO(g.DO.Offset(offset))
}

func (g groupContactDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IGroupContactDo {
	return g.withDO(g.DO.Scopes(funcs...))
}

func (g groupContactDo) Unscoped() IGroupContactDo {
	return g.withDO(g.DO.Unscoped())
}

func (g groupContactDo) Create(values ...*model.GroupContact) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Create(values)
}

func (g groupContactDo) CreateInBatches(values []*model.GroupContact, batchSize int) error {
	return g.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (g groupContactDo) Save(values ...*model.GroupContact) error {
	if len(values) == 0 {
		return nil
	}
	return g.DO.Save(values)
}

func (g groupContactDo) First() (*model.GroupContact, error) {
	if result, err := g.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContact), nil
	}
}

func (g groupContactDo) Take() (*model.GroupContact, error) {
	if result, err := g.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContact), nil
	}
}

func (g groupContactDo) Last() (*model.GroupContact, error) {
	if result, err := g.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContact), nil
	}
}

func (g groupContactDo) Find() ([]*model.GroupContact, error) {
	result, err := g.DO.Find()
	return result.([]*model.GroupContact), err
}

func (g groupContactDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.GroupContact, err error) {
	buf := make([]*model.GroupContact, 0, batchSize)
	err = g.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (g groupContactDo) FindInBatches(result *[]*model.GroupContact, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return g.DO.FindInBatches(result, batchSize, fc)
}

func (g groupContactDo) Attrs(attrs ...field.AssignExpr) IGroupContactDo {
	return g.withDO(g.DO.Attrs(attrs...))
}

func (g groupContactDo) Assign(attrs ...field.AssignExpr) IGroupContactDo {
	return g.withDO(g.DO.Assign(attrs...))
}

func (g groupContactDo) Joins(fields ...field.RelationField) IGroupContactDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Joins(_f))
	}
	return &g
}

func (g groupContactDo) Preload(fields ...field.RelationField) IGroupContactDo {
	for _, _f := range fields {
		g = *g.withDO(g.DO.Preload(_f))
	}
	return &g
}

func (g groupContactDo) FirstOrInit() (*model.GroupContact, error) {
	if result, err := g.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContact), nil
	}
}

func (g groupContactDo) FirstOrCreate() (*model.GroupContact, error) {
	if result, err := g.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.GroupContact), nil
	}
}

func (g groupContactDo) FindByPage(offset int, limit int) (result []*model.GroupContact, count int64, err error) {
	result, err = g.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = g.Offset(-1).Limit(-1).Count()
	return
}

func (g groupContactDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = g.Count()
	if err != nil {
		return
	}

	err = g.Offset(offset).Limit(limit).Scan(result)
	return
}

func (g groupContactDo) Scan(result interface{}) (err error) {
	return g.DO.Scan(result)
}

func (g groupContactDo) Delete(models ...*model.GroupContact) (result gen.ResultInfo, err error) {
	return g.DO.Delete(models)
}

func (g *groupContactDo) withDO(do gen.Dao) *groupContactDo {
	g.DO = *do.(*gen.DO)
	return g
}

// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package session

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/sqlite/model"
)

func newSessionAbstract(db *gorm.DB, opts ...gen.DOOption) sessionAbstract {
	_sessionAbstract := sessionAbstract{}

	_sessionAbstract.sessionAbstractDo.UseDB(db, opts...)
	_sessionAbstract.sessionAbstractDo.UseModel(&model.SessionAbstract{})

	tableName := _sessionAbstract.sessionAbstractDo.TableName()
	_sessionAbstract.ALL = field.NewAsterisk(tableName)
	_sessionAbstract.MNsUserName = field.NewString(tableName, "m_nsUserName")
	_sessionAbstract.MUUnReadCount = field.NewInt32(tableName, "m_uUnReadCount")
	_sessionAbstract.MBShowUnReadAsRedDot = field.NewInt32(tableName, "m_bShowUnReadAsRedDot")
	_sessionAbstract.MBMarkUnread = field.NewInt32(tableName, "m_bMarkUnread")
	_sessionAbstract.MULastTime = field.NewInt32(tableName, "m_uLastTime")
	_sessionAbstract.StrRes1 = field.NewString(tableName, "strRes1")
	_sessionAbstract.StrRes2 = field.NewString(tableName, "strRes2")
	_sessionAbstract.StrRes3 = field.NewString(tableName, "strRes3")
	_sessionAbstract.IntRes1 = field.NewInt32(tableName, "intRes1")
	_sessionAbstract.IntRes2 = field.NewInt32(tableName, "intRes2")
	_sessionAbstract.IntRes3 = field.NewInt32(tableName, "intRes3")
	_sessionAbstract.PackedMMSessionInfo = field.NewBytes(tableName, "_packed_MMSessionInfo")

	_sessionAbstract.fillFieldMap()

	return _sessionAbstract
}

type sessionAbstract struct {
	sessionAbstractDo

	ALL                  field.Asterisk
	MNsUserName          field.String
	MUUnReadCount        field.Int32
	MBShowUnReadAsRedDot field.Int32
	MBMarkUnread         field.Int32
	MULastTime           field.Int32
	StrRes1              field.String
	StrRes2              field.String
	StrRes3              field.String
	IntRes1              field.Int32
	IntRes2              field.Int32
	IntRes3              field.Int32
	PackedMMSessionInfo  field.Bytes

	fieldMap map[string]field.Expr
}

func (s sessionAbstract) Table(newTableName string) *sessionAbstract {
	s.sessionAbstractDo.UseTable(newTableName)
	return s.updateTableName(newTableName)
}

func (s sessionAbstract) As(alias string) *sessionAbstract {
	s.sessionAbstractDo.DO = *(s.sessionAbstractDo.As(alias).(*gen.DO))
	return s.updateTableName(alias)
}

func (s *sessionAbstract) updateTableName(table string) *sessionAbstract {
	s.ALL = field.NewAsterisk(table)
	s.MNsUserName = field.NewString(table, "m_nsUserName")
	s.MUUnReadCount = field.NewInt32(table, "m_uUnReadCount")
	s.MBShowUnReadAsRedDot = field.NewInt32(table, "m_bShowUnReadAsRedDot")
	s.MBMarkUnread = field.NewInt32(table, "m_bMarkUnread")
	s.MULastTime = field.NewInt32(table, "m_uLastTime")
	s.StrRes1 = field.NewString(table, "strRes1")
	s.StrRes2 = field.NewString(table, "strRes2")
	s.StrRes3 = field.NewString(table, "strRes3")
	s.IntRes1 = field.NewInt32(table, "intRes1")
	s.IntRes2 = field.NewInt32(table, "intRes2")
	s.IntRes3 = field.NewInt32(table, "intRes3")
	s.PackedMMSessionInfo = field.NewBytes(table, "_packed_MMSessionInfo")

	s.fillFieldMap()

	return s
}

func (s *sessionAbstract) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := s.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (s *sessionAbstract) fillFieldMap() {
	s.fieldMap = make(map[string]field.Expr, 12)
	s.fieldMap["m_nsUserName"] = s.MNsUserName
	s.fieldMap["m_uUnReadCount"] = s.MUUnReadCount
	s.fieldMap["m_bShowUnReadAsRedDot"] = s.MBShowUnReadAsRedDot
	s.fieldMap["m_bMarkUnread"] = s.MBMarkUnread
	s.fieldMap["m_uLastTime"] = s.MULastTime
	s.fieldMap["strRes1"] = s.StrRes1
	s.fieldMap["strRes2"] = s.StrRes2
	s.fieldMap["strRes3"] = s.StrRes3
	s.fieldMap["intRes1"] = s.IntRes1
	s.fieldMap["intRes2"] = s.IntRes2
	s.fieldMap["intRes3"] = s.IntRes3
	s.fieldMap["_packed_MMSessionInfo"] = s.PackedMMSessionInfo
}

func (s sessionAbstract) clone(db *gorm.DB) sessionAbstract {
	s.sessionAbstractDo.ReplaceConnPool(db.Statement.ConnPool)
	return s
}

func (s sessionAbstract) replaceDB(db *gorm.DB) sessionAbstract {
	s.sessionAbstractDo.ReplaceDB(db)
	return s
}

type sessionAbstractDo struct{ gen.DO }

type ISessionAbstractDo interface {
	gen.SubQuery
	Debug() ISessionAbstractDo
	WithContext(ctx context.Context) ISessionAbstractDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ISessionAbstractDo
	WriteDB() ISessionAbstractDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ISessionAbstractDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ISessionAbstractDo
	Not(conds ...gen.Condition) ISessionAbstractDo
	Or(conds ...gen.Condition) ISessionAbstractDo
	Select(conds ...field.Expr) ISessionAbstractDo
	Where(conds ...gen.Condition) ISessionAbstractDo
	Order(conds ...field.Expr) ISessionAbstractDo
	Distinct(cols ...field.Expr) ISessionAbstractDo
	Omit(cols ...field.Expr) ISessionAbstractDo
	Join(table schema.Tabler, on ...field.Expr) ISessionAbstractDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo
	RightJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo
	Group(cols ...field.Expr) ISessionAbstractDo
	Having(conds ...gen.Condition) ISessionAbstractDo
	Limit(limit int) ISessionAbstractDo
	Offset(offset int) ISessionAbstractDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionAbstractDo
	Unscoped() ISessionAbstractDo
	Create(values ...*model.SessionAbstract) error
	CreateInBatches(values []*model.SessionAbstract, batchSize int) error
	Save(values ...*model.SessionAbstract) error
	First() (*model.SessionAbstract, error)
	Take() (*model.SessionAbstract, error)
	Last() (*model.SessionAbstract, error)
	Find() ([]*model.SessionAbstract, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionAbstract, err error)
	FindInBatches(result *[]*model.SessionAbstract, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.SessionAbstract) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ISessionAbstractDo
	Assign(attrs ...field.AssignExpr) ISessionAbstractDo
	Joins(fields ...field.RelationField) ISessionAbstractDo
	Preload(fields ...field.RelationField) ISessionAbstractDo
	FirstOrInit() (*model.SessionAbstract, error)
	FirstOrCreate() (*model.SessionAbstract, error)
	FindByPage(offset int, limit int) (result []*model.SessionAbstract, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ISessionAbstractDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.SessionAbstract, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (s sessionAbstractDo) GetByID(id int) (result model.SessionAbstract, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM SessionAbstract WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = s.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (s sessionAbstractDo) Debug() ISessionAbstractDo {
	return s.withDO(s.DO.Debug())
}

func (s sessionAbstractDo) WithContext(ctx context.Context) ISessionAbstractDo {
	return s.withDO(s.DO.WithContext(ctx))
}

func (s sessionAbstractDo) ReadDB() ISessionAbstractDo {
	return s.Clauses(dbresolver.Read)
}

func (s sessionAbstractDo) WriteDB() ISessionAbstractDo {
	return s.Clauses(dbresolver.Write)
}

func (s sessionAbstractDo) Session(config *gorm.Session) ISessionAbstractDo {
	return s.withDO(s.DO.Session(config))
}

func (s sessionAbstractDo) Clauses(conds ...clause.Expression) ISessionAbstractDo {
	return s.withDO(s.DO.Clauses(conds...))
}

func (s sessionAbstractDo) Returning(value interface{}, columns ...string) ISessionAbstractDo {
	return s.withDO(s.DO.Returning(value, columns...))
}

func (s sessionAbstractDo) Not(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Not(conds...))
}

func (s sessionAbstractDo) Or(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Or(conds...))
}

func (s sessionAbstractDo) Select(conds ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Select(conds...))
}

func (s sessionAbstractDo) Where(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Where(conds...))
}

func (s sessionAbstractDo) Order(conds ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Order(conds...))
}

func (s sessionAbstractDo) Distinct(cols ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Distinct(cols...))
}

func (s sessionAbstractDo) Omit(cols ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Omit(cols...))
}

func (s sessionAbstractDo) Join(table schema.Tabler, on ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Join(table, on...))
}

func (s sessionAbstractDo) LeftJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.LeftJoin(table, on...))
}

func (s sessionAbstractDo) RightJoin(table schema.Tabler, on ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.RightJoin(table, on...))
}

func (s sessionAbstractDo) Group(cols ...field.Expr) ISessionAbstractDo {
	return s.withDO(s.DO.Group(cols...))
}

func (s sessionAbstractDo) Having(conds ...gen.Condition) ISessionAbstractDo {
	return s.withDO(s.DO.Having(conds...))
}

func (s sessionAbstractDo) Limit(limit int) ISessionAbstractDo {
	return s.withDO(s.DO.Limit(limit))
}

func (s sessionAbstractDo) Offset(offset int) ISessionAbstractDo {
	return s.withDO(s.DO.Offset(offset))
}

func (s sessionAbstractDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ISessionAbstractDo {
	return s.withDO(s.DO.Scopes(funcs...))
}

func (s sessionAbstractDo) Unscoped() ISessionAbstractDo {
	return s.withDO(s.DO.Unscoped())
}

func (s sessionAbstractDo) Create(values ...*model.SessionAbstract) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Create(values)
}

func (s sessionAbstractDo) CreateInBatches(values []*model.SessionAbstract, batchSize int) error {
	return s.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (s sessionAbstractDo) Save(values ...*model.SessionAbstract) error {
	if len(values) == 0 {
		return nil
	}
	return s.DO.Save(values)
}

func (s sessionAbstractDo) First() (*model.SessionAbstract, error) {
	if result, err := s.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) Take() (*model.SessionAbstract, error) {
	if result, err := s.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) Last() (*model.SessionAbstract, error) {
	if result, err := s.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) Find() ([]*model.SessionAbstract, error) {
	result, err := s.DO.Find()
	return result.([]*model.SessionAbstract), err
}

func (s sessionAbstractDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.SessionAbstract, err error) {
	buf := make([]*model.SessionAbstract, 0, batchSize)
	err = s.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (s sessionAbstractDo) FindInBatches(result *[]*model.SessionAbstract, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return s.DO.FindInBatches(result, batchSize, fc)
}

func (s sessionAbstractDo) Attrs(attrs ...field.AssignExpr) ISessionAbstractDo {
	return s.withDO(s.DO.Attrs(attrs...))
}

func (s sessionAbstractDo) Assign(attrs ...field.AssignExpr) ISessionAbstractDo {
	return s.withDO(s.DO.Assign(attrs...))
}

func (s sessionAbstractDo) Joins(fields ...field.RelationField) ISessionAbstractDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Joins(_f))
	}
	return &s
}

func (s sessionAbstractDo) Preload(fields ...field.RelationField) ISessionAbstractDo {
	for _, _f := range fields {
		s = *s.withDO(s.DO.Preload(_f))
	}
	return &s
}

func (s sessionAbstractDo) FirstOrInit() (*model.SessionAbstract, error) {
	if result, err := s.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) FirstOrCreate() (*model.SessionAbstract, error) {
	if result, err := s.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.SessionAbstract), nil
	}
}

func (s sessionAbstractDo) FindByPage(offset int, limit int) (result []*model.SessionAbstract, count int64, err error) {
	result, err = s.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = s.Offset(-1).Limit(-1).Count()
	return
}

func (s sessionAbstractDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = s.Count()
	if err != nil {
		return
	}

	err = s.Offset(offset).Limit(limit).Scan(result)
	return
}

func (s sessionAbstractDo) Scan(result interface{}) (err error) {
	return s.DO.Scan(result)
}

func (s sessionAbstractDo) Delete(models ...*model.SessionAbstract) (result gen.ResultInfo, err error) {
	return s.DO.Delete(models)
}

func (s *sessionAbstractDo) withDO(do gen.Dao) *sessionAbstractDo {
	s.DO = *do.(*gen.DO)
	return s
}

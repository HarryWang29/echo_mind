// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package contact

import (
	"context"
	"strings"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/HarryWang29/echo_mind/internal/infra/db/sqlite/model"
)

func newWCContact(db *gorm.DB, opts ...gen.DOOption) wCContact {
	_wCContact := wCContact{}

	_wCContact.wCContactDo.UseDB(db, opts...)
	_wCContact.wCContactDo.UseModel(&model.WCContact{})

	tableName := _wCContact.wCContactDo.TableName()
	_wCContact.ALL = field.NewAsterisk(tableName)
	_wCContact.MNsUsrName = field.NewString(tableName, "m_nsUsrName")
	_wCContact.MUIConType = field.NewInt32(tableName, "m_uiConType")
	_wCContact.Nickname = field.NewString(tableName, "nickname")
	_wCContact.MNsFullPY = field.NewString(tableName, "m_nsFullPY")
	_wCContact.MNsShortPY = field.NewString(tableName, "m_nsShortPY")
	_wCContact.MNsRemark = field.NewString(tableName, "m_nsRemark")
	_wCContact.MNsRemarkPYFull = field.NewString(tableName, "m_nsRemarkPYFull")
	_wCContact.MNsRemarkPYShort = field.NewString(tableName, "m_nsRemarkPYShort")
	_wCContact.MUICertificationFlag = field.NewInt32(tableName, "m_uiCertificationFlag")
	_wCContact.MUISex = field.NewInt32(tableName, "m_uiSex")
	_wCContact.MUIType = field.NewInt32(tableName, "m_uiType")
	_wCContact.MNsImgStatus = field.NewString(tableName, "m_nsImgStatus")
	_wCContact.MUIImgKey = field.NewInt32(tableName, "m_uiImgKey")
	_wCContact.MNsHeadImgURL = field.NewString(tableName, "m_nsHeadImgUrl")
	_wCContact.MNsHeadHDImgURL = field.NewString(tableName, "m_nsHeadHDImgUrl")
	_wCContact.MNsHeadHDMd5 = field.NewString(tableName, "m_nsHeadHDMd5")
	_wCContact.MNsChatRoomMemList = field.NewString(tableName, "m_nsChatRoomMemList")
	_wCContact.MNsChatRoomAdminList = field.NewString(tableName, "m_nsChatRoomAdminList")
	_wCContact.MUIChatRoomStatus = field.NewInt32(tableName, "m_uiChatRoomStatus")
	_wCContact.MNsChatRoomDesc = field.NewString(tableName, "m_nsChatRoomDesc")
	_wCContact.MNsDraft = field.NewString(tableName, "m_nsDraft")
	_wCContact.MNsBrandIconURL = field.NewString(tableName, "m_nsBrandIconUrl")
	_wCContact.MNsGoogleContactName = field.NewString(tableName, "m_nsGoogleContactName")
	_wCContact.MNsAliasName = field.NewString(tableName, "m_nsAliasName")
	_wCContact.MNsEncodeUserName = field.NewString(tableName, "m_nsEncodeUserName")
	_wCContact.MUIChatRoomVersion = field.NewInt32(tableName, "m_uiChatRoomVersion")
	_wCContact.MUIChatRoomMaxCount = field.NewInt32(tableName, "m_uiChatRoomMaxCount")
	_wCContact.MUIChatRoomType = field.NewInt32(tableName, "m_uiChatRoomType")
	_wCContact.MPatSuffix = field.NewString(tableName, "m_patSuffix")
	_wCContact.RichChatRoomDesc = field.NewString(tableName, "richChatRoomDesc")
	_wCContact.PackedWCContactData = field.NewBytes(tableName, "_packed_WCContactData")
	_wCContact.OpenIMInfo = field.NewBytes(tableName, "openIMInfo")

	_wCContact.fillFieldMap()

	return _wCContact
}

type wCContact struct {
	wCContactDo

	ALL                  field.Asterisk
	MNsUsrName           field.String
	MUIConType           field.Int32
	Nickname             field.String
	MNsFullPY            field.String
	MNsShortPY           field.String
	MNsRemark            field.String
	MNsRemarkPYFull      field.String
	MNsRemarkPYShort     field.String
	MUICertificationFlag field.Int32
	MUISex               field.Int32
	MUIType              field.Int32
	MNsImgStatus         field.String
	MUIImgKey            field.Int32
	MNsHeadImgURL        field.String
	MNsHeadHDImgURL      field.String
	MNsHeadHDMd5         field.String
	MNsChatRoomMemList   field.String
	MNsChatRoomAdminList field.String
	MUIChatRoomStatus    field.Int32
	MNsChatRoomDesc      field.String
	MNsDraft             field.String
	MNsBrandIconURL      field.String
	MNsGoogleContactName field.String
	MNsAliasName         field.String
	MNsEncodeUserName    field.String
	MUIChatRoomVersion   field.Int32
	MUIChatRoomMaxCount  field.Int32
	MUIChatRoomType      field.Int32
	MPatSuffix           field.String
	RichChatRoomDesc     field.String
	PackedWCContactData  field.Bytes
	OpenIMInfo           field.Bytes

	fieldMap map[string]field.Expr
}

func (w wCContact) Table(newTableName string) *wCContact {
	w.wCContactDo.UseTable(newTableName)
	return w.updateTableName(newTableName)
}

func (w wCContact) As(alias string) *wCContact {
	w.wCContactDo.DO = *(w.wCContactDo.As(alias).(*gen.DO))
	return w.updateTableName(alias)
}

func (w *wCContact) updateTableName(table string) *wCContact {
	w.ALL = field.NewAsterisk(table)
	w.MNsUsrName = field.NewString(table, "m_nsUsrName")
	w.MUIConType = field.NewInt32(table, "m_uiConType")
	w.Nickname = field.NewString(table, "nickname")
	w.MNsFullPY = field.NewString(table, "m_nsFullPY")
	w.MNsShortPY = field.NewString(table, "m_nsShortPY")
	w.MNsRemark = field.NewString(table, "m_nsRemark")
	w.MNsRemarkPYFull = field.NewString(table, "m_nsRemarkPYFull")
	w.MNsRemarkPYShort = field.NewString(table, "m_nsRemarkPYShort")
	w.MUICertificationFlag = field.NewInt32(table, "m_uiCertificationFlag")
	w.MUISex = field.NewInt32(table, "m_uiSex")
	w.MUIType = field.NewInt32(table, "m_uiType")
	w.MNsImgStatus = field.NewString(table, "m_nsImgStatus")
	w.MUIImgKey = field.NewInt32(table, "m_uiImgKey")
	w.MNsHeadImgURL = field.NewString(table, "m_nsHeadImgUrl")
	w.MNsHeadHDImgURL = field.NewString(table, "m_nsHeadHDImgUrl")
	w.MNsHeadHDMd5 = field.NewString(table, "m_nsHeadHDMd5")
	w.MNsChatRoomMemList = field.NewString(table, "m_nsChatRoomMemList")
	w.MNsChatRoomAdminList = field.NewString(table, "m_nsChatRoomAdminList")
	w.MUIChatRoomStatus = field.NewInt32(table, "m_uiChatRoomStatus")
	w.MNsChatRoomDesc = field.NewString(table, "m_nsChatRoomDesc")
	w.MNsDraft = field.NewString(table, "m_nsDraft")
	w.MNsBrandIconURL = field.NewString(table, "m_nsBrandIconUrl")
	w.MNsGoogleContactName = field.NewString(table, "m_nsGoogleContactName")
	w.MNsAliasName = field.NewString(table, "m_nsAliasName")
	w.MNsEncodeUserName = field.NewString(table, "m_nsEncodeUserName")
	w.MUIChatRoomVersion = field.NewInt32(table, "m_uiChatRoomVersion")
	w.MUIChatRoomMaxCount = field.NewInt32(table, "m_uiChatRoomMaxCount")
	w.MUIChatRoomType = field.NewInt32(table, "m_uiChatRoomType")
	w.MPatSuffix = field.NewString(table, "m_patSuffix")
	w.RichChatRoomDesc = field.NewString(table, "richChatRoomDesc")
	w.PackedWCContactData = field.NewBytes(table, "_packed_WCContactData")
	w.OpenIMInfo = field.NewBytes(table, "openIMInfo")

	w.fillFieldMap()

	return w
}

func (w *wCContact) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := w.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (w *wCContact) fillFieldMap() {
	w.fieldMap = make(map[string]field.Expr, 32)
	w.fieldMap["m_nsUsrName"] = w.MNsUsrName
	w.fieldMap["m_uiConType"] = w.MUIConType
	w.fieldMap["nickname"] = w.Nickname
	w.fieldMap["m_nsFullPY"] = w.MNsFullPY
	w.fieldMap["m_nsShortPY"] = w.MNsShortPY
	w.fieldMap["m_nsRemark"] = w.MNsRemark
	w.fieldMap["m_nsRemarkPYFull"] = w.MNsRemarkPYFull
	w.fieldMap["m_nsRemarkPYShort"] = w.MNsRemarkPYShort
	w.fieldMap["m_uiCertificationFlag"] = w.MUICertificationFlag
	w.fieldMap["m_uiSex"] = w.MUISex
	w.fieldMap["m_uiType"] = w.MUIType
	w.fieldMap["m_nsImgStatus"] = w.MNsImgStatus
	w.fieldMap["m_uiImgKey"] = w.MUIImgKey
	w.fieldMap["m_nsHeadImgUrl"] = w.MNsHeadImgURL
	w.fieldMap["m_nsHeadHDImgUrl"] = w.MNsHeadHDImgURL
	w.fieldMap["m_nsHeadHDMd5"] = w.MNsHeadHDMd5
	w.fieldMap["m_nsChatRoomMemList"] = w.MNsChatRoomMemList
	w.fieldMap["m_nsChatRoomAdminList"] = w.MNsChatRoomAdminList
	w.fieldMap["m_uiChatRoomStatus"] = w.MUIChatRoomStatus
	w.fieldMap["m_nsChatRoomDesc"] = w.MNsChatRoomDesc
	w.fieldMap["m_nsDraft"] = w.MNsDraft
	w.fieldMap["m_nsBrandIconUrl"] = w.MNsBrandIconURL
	w.fieldMap["m_nsGoogleContactName"] = w.MNsGoogleContactName
	w.fieldMap["m_nsAliasName"] = w.MNsAliasName
	w.fieldMap["m_nsEncodeUserName"] = w.MNsEncodeUserName
	w.fieldMap["m_uiChatRoomVersion"] = w.MUIChatRoomVersion
	w.fieldMap["m_uiChatRoomMaxCount"] = w.MUIChatRoomMaxCount
	w.fieldMap["m_uiChatRoomType"] = w.MUIChatRoomType
	w.fieldMap["m_patSuffix"] = w.MPatSuffix
	w.fieldMap["richChatRoomDesc"] = w.RichChatRoomDesc
	w.fieldMap["_packed_WCContactData"] = w.PackedWCContactData
	w.fieldMap["openIMInfo"] = w.OpenIMInfo
}

func (w wCContact) clone(db *gorm.DB) wCContact {
	w.wCContactDo.ReplaceConnPool(db.Statement.ConnPool)
	return w
}

func (w wCContact) replaceDB(db *gorm.DB) wCContact {
	w.wCContactDo.ReplaceDB(db)
	return w
}

type wCContactDo struct{ gen.DO }

type IWCContactDo interface {
	gen.SubQuery
	Debug() IWCContactDo
	WithContext(ctx context.Context) IWCContactDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() IWCContactDo
	WriteDB() IWCContactDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) IWCContactDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) IWCContactDo
	Not(conds ...gen.Condition) IWCContactDo
	Or(conds ...gen.Condition) IWCContactDo
	Select(conds ...field.Expr) IWCContactDo
	Where(conds ...gen.Condition) IWCContactDo
	Order(conds ...field.Expr) IWCContactDo
	Distinct(cols ...field.Expr) IWCContactDo
	Omit(cols ...field.Expr) IWCContactDo
	Join(table schema.Tabler, on ...field.Expr) IWCContactDo
	LeftJoin(table schema.Tabler, on ...field.Expr) IWCContactDo
	RightJoin(table schema.Tabler, on ...field.Expr) IWCContactDo
	Group(cols ...field.Expr) IWCContactDo
	Having(conds ...gen.Condition) IWCContactDo
	Limit(limit int) IWCContactDo
	Offset(offset int) IWCContactDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) IWCContactDo
	Unscoped() IWCContactDo
	Create(values ...*model.WCContact) error
	CreateInBatches(values []*model.WCContact, batchSize int) error
	Save(values ...*model.WCContact) error
	First() (*model.WCContact, error)
	Take() (*model.WCContact, error)
	Last() (*model.WCContact, error)
	Find() ([]*model.WCContact, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WCContact, err error)
	FindInBatches(result *[]*model.WCContact, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.WCContact) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) IWCContactDo
	Assign(attrs ...field.AssignExpr) IWCContactDo
	Joins(fields ...field.RelationField) IWCContactDo
	Preload(fields ...field.RelationField) IWCContactDo
	FirstOrInit() (*model.WCContact, error)
	FirstOrCreate() (*model.WCContact, error)
	FindByPage(offset int, limit int) (result []*model.WCContact, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) IWCContactDo
	UnderlyingDB() *gorm.DB
	schema.Tabler

	GetByID(id int) (result model.WCContact, err error)
}

// SELECT * FROM @@table WHERE id=@id
func (w wCContactDo) GetByID(id int) (result model.WCContact, err error) {
	var params []interface{}

	var generateSQL strings.Builder
	params = append(params, id)
	generateSQL.WriteString("SELECT * FROM WCContact WHERE id=? ")

	var executeSQL *gorm.DB
	executeSQL = w.UnderlyingDB().Raw(generateSQL.String(), params...).Take(&result) // ignore_security_alert
	err = executeSQL.Error

	return
}

func (w wCContactDo) Debug() IWCContactDo {
	return w.withDO(w.DO.Debug())
}

func (w wCContactDo) WithContext(ctx context.Context) IWCContactDo {
	return w.withDO(w.DO.WithContext(ctx))
}

func (w wCContactDo) ReadDB() IWCContactDo {
	return w.Clauses(dbresolver.Read)
}

func (w wCContactDo) WriteDB() IWCContactDo {
	return w.Clauses(dbresolver.Write)
}

func (w wCContactDo) Session(config *gorm.Session) IWCContactDo {
	return w.withDO(w.DO.Session(config))
}

func (w wCContactDo) Clauses(conds ...clause.Expression) IWCContactDo {
	return w.withDO(w.DO.Clauses(conds...))
}

func (w wCContactDo) Returning(value interface{}, columns ...string) IWCContactDo {
	return w.withDO(w.DO.Returning(value, columns...))
}

func (w wCContactDo) Not(conds ...gen.Condition) IWCContactDo {
	return w.withDO(w.DO.Not(conds...))
}

func (w wCContactDo) Or(conds ...gen.Condition) IWCContactDo {
	return w.withDO(w.DO.Or(conds...))
}

func (w wCContactDo) Select(conds ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.Select(conds...))
}

func (w wCContactDo) Where(conds ...gen.Condition) IWCContactDo {
	return w.withDO(w.DO.Where(conds...))
}

func (w wCContactDo) Order(conds ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.Order(conds...))
}

func (w wCContactDo) Distinct(cols ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.Distinct(cols...))
}

func (w wCContactDo) Omit(cols ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.Omit(cols...))
}

func (w wCContactDo) Join(table schema.Tabler, on ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.Join(table, on...))
}

func (w wCContactDo) LeftJoin(table schema.Tabler, on ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.LeftJoin(table, on...))
}

func (w wCContactDo) RightJoin(table schema.Tabler, on ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.RightJoin(table, on...))
}

func (w wCContactDo) Group(cols ...field.Expr) IWCContactDo {
	return w.withDO(w.DO.Group(cols...))
}

func (w wCContactDo) Having(conds ...gen.Condition) IWCContactDo {
	return w.withDO(w.DO.Having(conds...))
}

func (w wCContactDo) Limit(limit int) IWCContactDo {
	return w.withDO(w.DO.Limit(limit))
}

func (w wCContactDo) Offset(offset int) IWCContactDo {
	return w.withDO(w.DO.Offset(offset))
}

func (w wCContactDo) Scopes(funcs ...func(gen.Dao) gen.Dao) IWCContactDo {
	return w.withDO(w.DO.Scopes(funcs...))
}

func (w wCContactDo) Unscoped() IWCContactDo {
	return w.withDO(w.DO.Unscoped())
}

func (w wCContactDo) Create(values ...*model.WCContact) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Create(values)
}

func (w wCContactDo) CreateInBatches(values []*model.WCContact, batchSize int) error {
	return w.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (w wCContactDo) Save(values ...*model.WCContact) error {
	if len(values) == 0 {
		return nil
	}
	return w.DO.Save(values)
}

func (w wCContactDo) First() (*model.WCContact, error) {
	if result, err := w.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.WCContact), nil
	}
}

func (w wCContactDo) Take() (*model.WCContact, error) {
	if result, err := w.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.WCContact), nil
	}
}

func (w wCContactDo) Last() (*model.WCContact, error) {
	if result, err := w.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.WCContact), nil
	}
}

func (w wCContactDo) Find() ([]*model.WCContact, error) {
	result, err := w.DO.Find()
	return result.([]*model.WCContact), err
}

func (w wCContactDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.WCContact, err error) {
	buf := make([]*model.WCContact, 0, batchSize)
	err = w.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (w wCContactDo) FindInBatches(result *[]*model.WCContact, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return w.DO.FindInBatches(result, batchSize, fc)
}

func (w wCContactDo) Attrs(attrs ...field.AssignExpr) IWCContactDo {
	return w.withDO(w.DO.Attrs(attrs...))
}

func (w wCContactDo) Assign(attrs ...field.AssignExpr) IWCContactDo {
	return w.withDO(w.DO.Assign(attrs...))
}

func (w wCContactDo) Joins(fields ...field.RelationField) IWCContactDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Joins(_f))
	}
	return &w
}

func (w wCContactDo) Preload(fields ...field.RelationField) IWCContactDo {
	for _, _f := range fields {
		w = *w.withDO(w.DO.Preload(_f))
	}
	return &w
}

func (w wCContactDo) FirstOrInit() (*model.WCContact, error) {
	if result, err := w.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.WCContact), nil
	}
}

func (w wCContactDo) FirstOrCreate() (*model.WCContact, error) {
	if result, err := w.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.WCContact), nil
	}
}

func (w wCContactDo) FindByPage(offset int, limit int) (result []*model.WCContact, count int64, err error) {
	result, err = w.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = w.Offset(-1).Limit(-1).Count()
	return
}

func (w wCContactDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = w.Count()
	if err != nil {
		return
	}

	err = w.Offset(offset).Limit(limit).Scan(result)
	return
}

func (w wCContactDo) Scan(result interface{}) (err error) {
	return w.DO.Scan(result)
}

func (w wCContactDo) Delete(models ...*model.WCContact) (result gen.ResultInfo, err error) {
	return w.DO.Delete(models)
}

func (w *wCContactDo) withDO(do gen.Dao) *wCContactDo {
	w.DO = *do.(*gen.DO)
	return w
}
